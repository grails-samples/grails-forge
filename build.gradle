buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }

    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "org.grails.plugins:views-gradle:$viewsVersion"
        classpath "com.github.pivotalservices:ya-cf-app-gradle-plugin:$cfAppVersion"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:$gradleGitPropertiesVersion"

    }
}

version "1.7.0"
group "appgenerator"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.plugins.views-json"
apply from: 'gradle/cloudfoundry.gradle'
apply plugin: "com.gorylenko.gradle-git-properties"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    maven { url 'http://dl.bintray.com/grails/plugins' }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.springframework.boot:spring-boot-cli:$springBootVersion"

    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.16.Final"
    compile "org.grails.plugins:gsp"

    console "org.grails:grails-console"

    compile "org.grails.plugins:views-json:$viewsVersion"
    compile 'jline:jline:2.14.6'

    provided "org.codehaus.groovy:groovy-ant"

    profile "org.grails.profiles:web"

    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"

    compile "com.agileorbit:schwartz:$schwartzVersion"
    compile "org.grails:grails-navigation-core:$grailsNavigationVersion"
    compile "org.grails.plugins:grails-navigation:$grailsNavigationVersion"

    testCompile "cglib:cglib-nodep:3.2.10"
    testCompile "org.grails:grails-datastore-rest-client"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile("org.grails.plugins:geb") {
        exclude group: 'org.gebish', module: 'geb-spock'
    }
    testCompile "org.gebish:geb-spock:$gebVersion"

    testCompile "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
}

webdriverBinaries {
    chromedriver '2.45'
    geckodriver '0.23.0'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "download.folder", System.getProperty('download.folder')
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
    beforeTest { descriptor -> logger.quiet " -- $descriptor" }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}

assets {
    minifyJs = true
    minifyCss = true
}

integrationTest {
    group 'verification'
}
