buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/"}
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.7"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
        classpath "org.grails.plugins:views-gradle:$viewsVersion"
    }
}


group "appgenerator"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"org.grails.plugins.views-json"

repositories {
    maven {
        url "https://repo.grails.org/grails/core"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
	developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.springframework.boot:spring-boot-cli:$springBootVersion"

    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp"

    implementation("org.apache.maven:maven-resolver-provider:3.8.3") {
        exclude group: "com.google.guava", module: "guava"
    }

    implementation "org.apache.maven.resolver:maven-resolver-connector-basic:1.7.2"
    implementation "org.apache.maven.resolver:maven-resolver-impl:1.7.2"
    implementation "org.apache.maven.resolver:maven-resolver-transport-file:1.7.2"
    implementation ("org.apache.maven.resolver:maven-resolver-transport-http:1.7.2") {
        exclude group: "org.slf4j", module:"jcl-over-slf4j"
    }

    console "org.grails:grails-console"

    implementation "org.grails.plugins:views-json:$viewsVersion"

    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.cache:micronaut-cache-caffeine:3.0.0"
    compileOnly "io.micronaut:micronaut-inject-groovy"

    profile "org.grails.profiles:web"
    runtimeOnly "org.gradle:gradle-tooling-api:7.0"
    runtimeOnly "org.glassfish.web:el-impl:2.1.2-b03"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.3.4"

    implementation "org.grails:grails-navigation-core:$grailsNavigationVersion"
    implementation "org.grails.plugins:grails-navigation:$grailsNavigationVersion"

    testImplementation "org.springframework.boot:spring-boot-cli:2.5.5"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testImplementation "io.micronaut:micronaut-http-client"

}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    chromedriver {
        versionRegexp = '.*'
    }
    geckodriver '0.30.0'
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "download.folder", System.getProperty('download.folder')
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
    beforeTest { descriptor -> logger.quiet " -- $descriptor" }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}

assets {
    minifyJs = true
    minifyCss = true
    jarTaskName = "bootWar"
}
